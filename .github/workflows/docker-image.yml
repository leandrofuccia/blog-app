name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # 1. Fazer checkout do repositório
      - uses: actions/checkout@v4

      # 2. Configurar Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      # 3. Configurar variáveis de ambiente
      - name: Set environment variables
        env:
          PORT: 3002
          NODE_ENV: test
          DATABASE_USER: postgres
          DATABASE_HOST: localhost
          DATABASE_NAME: blogdb
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_PORT: 5432
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: echo "Environment variables configured!"

      # 4. Criar variável de timestamp
      - name: Set timestamp
        run: echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV

      # 5. Excluir cache e node_modules
      - name: Clean cache and node_modules
        run: |
          rm -rf node_modules package-lock.json

      # 6. Instalar dependências
      - name: Install dependencies
        run: npm install --legacy-peer-deps

      # 7. Executar testes
      - name: Run tests
        run: npm test

      # 8. Build da imagem Docker
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag leandrofuccia/blog-app:${{ env.TIMESTAMP }}

      # 9. Login no Docker Hub
      - name: Login to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      # 10. Push da imagem para o Docker Hub
      - name: Push Docker image
        run: docker push leandrofuccia/blog-app:${{ env.TIMESTAMP }}

      # 11. Rodar o container para teste
      - name: Run Docker container
        run: docker run -d -p 3002:3002 --name blog-app leandrofuccia/blog-app:${{ env.TIMESTAMP }}
